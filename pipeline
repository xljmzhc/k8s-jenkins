/*
 * 本流水线实现从GitHub拉取代码 -> Maven构建 -> Docker镜像打包 -> 推送到私有Harbor仓库的全流程
 */

pipeline {
  agent {
    kubernetes {
      label 'maven' // 使用标有'maven'的Pod模板
    }
  }

  // 触发器配置
  triggers {
    pollSCM('H/2 * * * *')  // 每两分钟轮询一次Git仓库变更
  }

  // 环境变量定义
  environment {
    DOCKER_REGISTRY = '192.168.137.137' // Harbor私有仓库地址
    DOCKER_IMAGE_NAME = 'springboot'    // 镜像名称
    DOCKER_IMAGE_TAG = "${env.BUILD_NUMBER}" // 使用构建号作为镜像标签
    // 设置Maven本地仓库路径（需与PVC挂载路径一致）
    MAVEN_OPTS = "-Dmaven.repo.local=/root/.m2/repository"
  }

  // 流水线阶段定义
  stages {
    
    /* 阶段1：代码检出 */
    stage('Checkout') {
      steps {
        container('maven') { // 指定在maven容器中执行
          checkout([
            $class: 'GitSCM',
            branches: [[name: '*/master']], // 检出master分支
            userRemoteConfigs: [[
              url: 'https://github.com/xljmzhc/Jenkins.git', // 仓库地址
              credentialsId: '2' // Jenkins中存储的Git凭据ID
            ]]
          ])
          sh 'ls -la' // 列出目录确认检出成功
        }
      }
    }

    /* 阶段2：Maven构建 */
    stage('mvn') {
      steps {
        container('maven') {
          /*
           * 先离线下载依赖（仅第一次需要下载）
           * -B 参数表示批处理模式
           */
          sh 'mvn dependency:go-offline -B'

          /*
           * 正式构建
           * -Dmaven.test.skip=true 跳过测试
           */
          sh 'mvn clean package -Dmaven.test.skip=true'
        }
      }
      post {
        success {
          // 归档生成的JAR包
          archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
          // 暂存JAR包供后续阶段使用
          stash name: 'app-jar', includes: 'target/*.jar'
        }
      }
    }

    /* 阶段3：Docker镜像构建与推送 */
    stage('Docker Build & Push') {
      // 切换到docker专用代理
      agent {
        kubernetes {
          label 'docker-build'  // 使用标有'docker-build'的Pod模板
        }
      }
      steps {
        container('docker') {
          // 恢复之前暂存的JAR包
          unstash 'app-jar'
          
          // 多行Shell脚本
          sh '''
            # 确认文件存在
            ls -l /home/jenkins/agent/
            
            # 动态生成Dockerfile
            cat > Dockerfile <<'EOF'
FROM 192.168.137.137/cicd/jdk17:latest  # 使用私有仓库的基础镜像
COPY target/*.jar /app.jar               # 复制构建产物
ENTRYPOINT ["java", "-jar", "/app.jar"]  # 定义启动命令
EOF
            
            # 构建Docker镜像
            docker build -t ${DOCKER_REGISTRY}/cicd/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} .
            
            # 推送镜像到Harbor
            docker push ${DOCKER_REGISTRY}/cicd/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}
          '''
        }
      }
    }
  }
}

/*
 * 技术要点说明：
 * 1. 多阶段构建：分离编译和镜像构建环境
 * 2. 依赖缓存：通过PVC持久化Maven本地仓库
 * 3. 文件传递：使用stash/unstash跨Pod传递构建产物
 * 4. 安全实践：使用凭据管理而非硬编码密码
 * 5. 镜像版本：使用BUILD_NUMBER确保唯一性
 */
